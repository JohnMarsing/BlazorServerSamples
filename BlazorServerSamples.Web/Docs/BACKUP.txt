
# john-003-add-FluentValidation


@if (People == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<p>NOT NECESSARY BECAUSE, IN THIS CASE, ITS ALREADY INSTANTIATED</p>
}


Add @using Blazored.FluentValidation to  _Imports.razor.

Change from 
  <EditForm Model="item" class="card card-body bg-light my-2"> <DataAnnotationsValidator />	<ValidationSummary />
To
 <EditForm Model="item" class="card card-body bg-light my-2"> <FluentValidationValidator  />	<ValidationSummary />

Change  YouTubeId
- Add  <input type="hidden" id="youTubeId" name="YouTubeId" value="@item.YouTubeId">
- Remove
```
					<div class="form-group row">
						<label for="youTubeId" class="col-md-3 col-form-label">YouTube Id:</label>
						<div class="col-md-9">
							<InputText id="youTubeId" class="form-control" @bind-Value="item.YouTubeId" />
							<ValidationMessage For="@(() => item.YouTubeId)" />
						</div>
					</div>
```


---

@*					<button class="btn btn-success btn-md" type="submit">
						<i class="fas fa-save"></i> Save
					</button>

					<button onclick=@(() => Message = "Button Clicked")>Add</button> 
					<button @onclick="@(e => HandleAddClick(buttonNumber, 5 * buttonNumber))">Check</button>

*@					


/*
- https://chrissainty.com/using-fluentvalidation-for-forms-validation-in-razor-components/
  The `NotEmpty` validator means we're making all the properties required. 

Building a form validator component
	The first is a new validator component to use in place of the `DataAnnotationsValidator` which comes as default. 
  Then we need to create an extension method for the `EditContext` which calls the validation logic from FluentValidation. 
 
 */


	void Edit_ButtonClick(int? id)
	{
		NavigationManager.NavigateTo(Links.Admin.AudioVisual.Update.Index + "/" + id);
	}


	// This should be changed GetMissingYouTubeListOnly
	private void UpdateYouTubeList()
	{
		foreach (var item in YouTubeList)
		{
			WeeklyVideoTable wvt = WeeklyVideoTableList.Find(x => x.YouTubeId == item.YouTubeId);

			// This if is pointless because in the UI, I ignore those rows
			// @foreach (var item in YouTubeList.Where(w => w.Id is null))
			if (wvt is not null)
			{
				Logger.LogDebug(string.Format("... wvt is not null, wvt.Id: {0}", wvt.Id));
				item.Id = wvt.Id;
				item.Title = wvt.Title;
				Logger.LogDebug(string.Format("...Item.Id: {0}; Item.Title: {1}", item.Id, item.Title));
			}
		}

		if (YouTubeList is not null && YouTubeList.Any())
		{
			Logger.LogDebug(string.Format("... YouTubeList.Count before: {0}", YouTubeList.Count));
			//YouTubeList = YouTubeList.Where(w => w.Id is null).ToList();
			Logger.LogDebug(string.Format("... YouTubeList.Count after: {0}", YouTubeList.Count));
		}
	}

	protected async Task HandleValidSubmit()
	{
		Logger.LogDebug(string.Format("...{0}", nameof(Index) + "!" + nameof(HandleValidSubmit)));
		DatabaseInformation = false;
		DatabaseInformationMsg = "";

		int newId = 0;
		WeeklyVideoInsert dto = new WeeklyVideoInsert();
		dto.ShabbatWeekId = vm.ShabbatWeekId;
		dto.WeeklyVideoTypeId = vm.WeeklyVideoTypeId;
		dto.YouTubeId = vm.YouTubeId;
		dto.Title = vm.Title;
		dto.Book = 0;
		dto.Chapter = 0;

		try
		{
			newId = await db.WeeklyVideoAdd(dto);
			//StateHasChanged(); this didn't work, I wanted to update WeeklyVideoTableList bud it didn't work
			//vm.ShabbatWeekId = 0;
			vm.Title = "";
			vm.YouTubeId = "";
		}
		catch (Exception ex)
		{
			DatabaseError = true;
			DatabaseErrorMsg = $"Error inserting row in database";
			Logger.LogError(ex, $"...{DatabaseErrorMsg}");
		}

		Logger.LogDebug(string.Format("...newId: {0}", newId));

		DatabaseInformation = true;
		DatabaseInformationMsg = $"Record Added; newId: {newId}";
	}


<TableTemplate Items="ShabbatWeekList">
	<TableHeader>
		<th class="text-info">Id</th>
		<th class="text-primary">Shabbat Date</th>
	</TableHeader>
	<RowTemplate>
		<td>@context.Id</td>
		<td>@context.ShabbatDate.ToShortDateString()</td>
	</RowTemplate>
</TableTemplate>


public interface IYouTubeFeedService
{
	Task<List<YouTubeFeedModel>> GetModel(string url, int take);
	//List<YouTubeFeedModel> GetModel();
}

		//private readonly IWeeklyVideosRepository db;
	private readonly ILogger Logger;

	public YouTubeFeedService(
		IWeeklyVideosRepository weeklyVideosRepository, ILogger<YouTubeFeedService> logger)
	{
		//db = weeklyVideosRepository;
		Logger = logger;
	}


	public List<YouTubeFeedModel> GetModel()
	{
		List<YouTubeFeedModel> l = new();

		l.Add(new YouTubeFeedModel()
		{
			Id = null,
			YouTubeId = "YouTubeId1",
			Title = "YouTube Id one",
			PublishDate = new DateTime(2022, 04, 29)
		});

		l.Add(new YouTubeFeedModel()
		{
			Id = null,
			YouTubeId = "YouTubeId2",
			Title = "YouTube Id two",
			PublishDate = new DateTime(2022, 05, 6)
		});

		l.Add(new YouTubeFeedModel()
		{
			Id = null,
			YouTubeId = "YouTubeId3",
			Title = "YouTube Id three",
			PublishDate = new DateTime(2022, 05, 13)
		});

		return l;
	}


	protected override async Task OnInitializedAsync()
	{
		Logger.LogDebug(string.Format("Inside {0}", nameof(Index) + "!" + nameof(OnInitialized)));
		await PopulateShabbatWeek();

		//YouTubeList = await Svc.GetModel(SocialMedia.YouTube.YouTubeFeed(), 5);
		YouTubeList = Svc.GetModel();
		
		await PopulateWeeklyVideoTableList();
		PopulateWeeklyVideoAddVMList();
	}


# Create WeeklyVideo
CREATE TABLE [dbo].[WeeklyVideo](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[ShabbatWeekId] [int] NOT NULL,
	[WeeklyVideoTypeId] [int] NOT NULL,
	[YouTubeId] [nvarchar](50) NOT NULL,
	[Title] [nvarchar](100) NOT NULL,
	[GraphicFile] [nvarchar](100) NULL,
	[NotesFile] [nvarchar](100) NULL,
	[Book] [int] NOT NULL,
	[Chapter] [int] NOT NULL,
 CONSTRAINT [PK_WeeklyVideo] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[WeeklyVideo] ADD  DEFAULT ('') FOR [Title]
GO

ALTER TABLE [dbo].[WeeklyVideo] ADD  DEFAULT ((1)) FOR [Book]
GO

ALTER TABLE [dbo].[WeeklyVideo] ADD  DEFAULT ((1)) FOR [Chapter]
GO

ALTER TABLE [dbo].[WeeklyVideo]  WITH CHECK ADD  CONSTRAINT [FK_WeeklyVideo_ShabbatWeek] FOREIGN KEY([ShabbatWeekId])
REFERENCES [dbo].[ShabbatWeek] ([Id])
GO

ALTER TABLE [dbo].[WeeklyVideo] CHECK CONSTRAINT [FK_WeeklyVideo_ShabbatWeek]
GO

ALTER TABLE [dbo].[WeeklyVideo]  WITH CHECK ADD  CONSTRAINT [FK_WeeklyVideo_WeeklyVideoType] FOREIGN KEY([WeeklyVideoTypeId])
REFERENCES [dbo].[WeeklyVideoType] ([Id])
GO

ALTER TABLE [dbo].[WeeklyVideo] CHECK CONSTRAINT [FK_WeeklyVideo_WeeklyVideoType]
GO

---

	public WeeklyVideoAddVM vm { get; set; } = new WeeklyVideoAddVM();
